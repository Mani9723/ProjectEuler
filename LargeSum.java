import javax.sound.midi.SysexMessage;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;

/**
 *https://projecteuler.netl/problem=13
 *
 *
 * PROBLEM 13:
 * find the first 10 digits of the sum
 *
 * @author Mani Shah
 * @version 1.0
 * @since 2/13/18
 */
import java.io.FileNotFoundException;
import java.io.File;
import java.io.InputStream;
import java.util.Scanner;

public class LargeSum
{
	public static void main(String[] args)
	{
		long start = System.nanoTime();
		long startt= System.currentTimeMillis();
		String number = "3710728753390210279879799822083759024651013574025046376937677490009
			7126481248969700780504170182605387432498619952474105947423330951305812372661730962991942
			213363574161572522430563301811072406154908250230675882075393461711719803104210475137780632
			6676892616706966236338201363784183836841787343617267572811287981284997940806548193159262169
			1275889832738442742289174325203219235894228767964876702721893184745144573600130643909116721
			6856844588711603153276703864861058430254399396198289175936656867579349516217645714185656062
			9502157223196586755079324193331649063524627419049291014324458138226633479447581789257586771
			83372176619637515905792397282455988384075820356532535939900840263356894883018945862822782880
			181199384826282014278194139940567587151170094390353986643728271126538299872407844730531901042
			9358686515506006295864861532075273371959191420517255829716938887077154664991155934876035329217
			1497005693854370070576826684624621495650076471787294438377604532826541087568284431911906346940378
			5521777929514536123272525000296071075082563815656710885258350721458765761724109764473391106072182
			65236877223636045174237069058518606604482076212098132878607339694128114266041808683061932846081119
			10615569405126896925193432545172838864191804704929321505864256304948362467221648435076201727918039
			94469300473295634069115732444386908125794514089057706229429197107928209550376875256787730918625407
			449698445083303936821261833638482533015468619612434876768129753437594651580386287592878490201521
			6855548287172012192577669547818283375799310361474035685644909552709786479758116726320100436897
			8425535399209318374414978068609844840309812907779179908821879532736447567559084803087086987551
			392711854517078544161852424320693150332599594068957565367821070749269665376763262354472106979395
			0679652694742597709739166693763042633987085410526847082990852113994273657341161827603150012716537
			86073615010808570091499395125570281987460043753582903531743471732693212357815498262974255273730794
			953759765105305946966067683156574377167401875275889028025717332296191766687138199318110487701902
			712526768027607800301367868099252546340106163286652636270218540497705585629946580636237993140746
			2559622407448690823117497779236546625724692332281091714191430288197103288597806669760892938638285
			025333403344130655780161278159218150055618688364684200904702305308117281643048762379196984248725
			5036638784583114876969321549028104240201383351244621814417734706378329949063625966649858761822122
			522551248676453367720186971698544312419572409913959008952310058822955482553002635207815322967962
			4948164195386821877476085327132285723110424803456124867697064507995236377742425354112916842768655389
			2620502491032657296723701913275725675285653248258265463092207058596522297988602722583319131263751473419
			94889534765745501184957014548792889848568277260777137214037988797153829820378303147352772158034814451349
			137322665138134829543829199918180278916522431027392251122869539409579530664052326325380441000596549391598
			795936352974615218550237130764225512118369380358038858490341698116222072977186158236678424689157993532
			96192262467957194401269043877107275048102390895523597457231897067725479150615055049539229795309011299675
			198618808822587531452958409925120382900940777077567211306739708304724483816533873502340845647058077308829
			5917476714036319800818712901187549131054712658197623331044818386269515456334926366572897563400500428462
			8018351707052783183942588214552122725125032755121603546981200581762165212827652751691296897789322381957343
			2933994643750190783694576588335239988675506164965184775180738168837861091527357929701337621778427521926234
			01942399639168044983993173312731329241857071473495669166746876346609150359146775049951867143023521962889
			489010242332511691361962662273267460800591547471830798392868535206946944540724768418225246744171615140364
			2798227334805555621481897142617910342598647204516893989422179826088076852877836461827993463137677543078
			093633330189826420901084880252167467088321512018588354322381287695278671329612474782464538636993009049310
			363619763878039621840735723997942234062353938083396513274080111166662789198148808779794187687614423003098
			4490851411606618262936828367647447792391803351109890697907148578694408955299065364044742557608365997664
			5795096660243964099053896071201982199760475994901972302976491398268003297315603712004137790378556608508
			9252167309393198727502754689069037075394130426523150119480937724504879515095410092164586375471059843679
			1786391670211874924319957006419179697775990283006991536871371193661495281130587638027841075444973307840
			7899231155355625611423224232550336854424889173534488991150144064802036906806396067232219320414953541503
			12888033953605329934036800697771065056663195481234880673210146739058568557934581403627822703280826165707
			73948327592232845941706525094512325230608229188020587773197198394501808880724296619808111977715854250201
			654509041324580978688277894872185961772107838435069186155435662884
			062257473692284509516208496039801340017239306716668235552452528046097225350353
			4226472524250874054075591789781264330331690";
		BigInteger[] array = new BigInteger[100];
		int j = 0;
		for(int i = 0; i< array.length;i++){
			array[i] = new BigInteger(number.substring(j,j+50));
			j+=50;
		}
		System.out.println(sum(array));
		System.out.println(System.nanoTime()-start);
		System.out.println(System.currentTimeMillis()-startt);
	}
	private static BigInteger sum(BigInteger[] array)
	{
		BigInteger sum = new BigInteger("0");
		for (int i = 0; i < array.length; i++) {
			sum = sum.add(array[i]);
		}
		return sum;
	}
}
